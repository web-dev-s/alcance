{"version":3,"sources":["../node_modules/qrcode.react/lib/index.js","../node_modules/qr.js/lib/mode.js","../node_modules/qr.js/lib/ErrorCorrectLevel.js","../node_modules/qr.js/lib/Polynomial.js","../node_modules/qr.js/lib/math.js","../node_modules/qr.js/lib/QRCode.js","../node_modules/qr.js/lib/8BitByte.js","../node_modules/qr.js/lib/RSBlock.js","../node_modules/qr.js/lib/BitBuffer.js","../node_modules/qr.js/lib/util.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_extends","Object","assign","target","i","arguments","length","source","key","hasOwnProperty","call","apply","this","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","_objectSpread","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","sourceSymbolKeys","propertyIsEnumerable","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","descriptor","configurable","writable","_createClass","protoProps","staticProps","_possibleConstructorReturn","self","_assertThisInitialized","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","ReferenceError","_inherits","subClass","superClass","create","value","_setPrototypeOf","p","React","__webpack_require__","QRCodeImpl","ErrorCorrectLevel","convertStr","str","out","charcode","charCodeAt","String","fromCharCode","DEFAULT_PROPS","size","level","bgColor","fgColor","includeMargin","generatePath","modules","margin","undefined","ops","row","y","start","cell","x","concat","join","excavateModules","excavation","slice","map","h","w","getImageSettings","cells","imageSettings","numCells","defaultSize","Math","floor","scale","width","height","excavate","floorX","floorY","ceil","SUPPORTS_PATH2D","Path2D","addPath","e","QRCodeCanvas","_React$PureComponent","_getPrototypeOf2","_this","_len","args","Array","_key","imgLoaded","setState","update","_this$props","qrcode","addData","make","_canvas","canvas","ctx","getContext","calculatedImageSettings","pixelRatio","window","devicePixelRatio","fillStyle","fillRect","fill","rdx","cdx","state","_image","drawImage","_this2","_this$props2","style","otherProps","canvasStyle","img","imgSrc","src","createElement","display","onLoad","handleImageLoad","ref","_ref","Fragment","_ref2","PureComponent","QRCodeSVG","_React$PureComponent2","_this$props3","image","xlinkHref","preserveAspectRatio","fgPath","shapeRendering","viewBox","d","QRCode","renderAs","Component","defaultProps","module","exports","MODE_NUMBER","MODE_ALPHA_NUM","MODE_8BIT_BYTE","MODE_KANJI","L","M","Q","H","math","QRPolynomial","num","shift","Error","offset","get","index","getLength","multiply","j","gexp","glog","mod","ratio","QRMath","n","LOG_TABLE","EXP_TABLE","BitByte","RSBlock","BitBuffer","util","Polynomial","typeNumber","errorCorrectLevel","moduleCount","dataCache","dataList","proto","data","newData","isDark","col","getModuleCount","rsBlocks","getRSBlocks","buffer","totalDataCount","dataCount","put","mode","getLengthInBits","write","makeImpl","getBestMaskPattern","test","maskPattern","setupPositionProbePattern","setupPositionAdjustPattern","setupTimingPattern","setupTypeInfo","setupTypeNumber","createData","mapData","r","c","minLostPoint","pattern","lostPoint","getLostPoint","createMovieClip","target_mc","instance_name","depth","qr_mc","createEmptyMovieClip","beginFill","moveTo","lineTo","endFill","pos","getPatternPosition","bits","getBCHTypeNumber","getBCHTypeInfo","inc","bitIndex","byteIndex","dark","getMask","PAD0","PAD1","putBit","createBytes","maxDcCount","maxEcCount","dcdata","ecdata","dcCount","ecCount","totalCount","max","rsPoly","getErrorCorrectPolynomial","modPoly","modIndex","totalCodeCount","QR8bitByte","ECL","QRRSBlock","RS_BLOCK_TABLE","rsBlock","getRsBlockTable","list","count","QRBitBuffer","bufIndex","bit","Mode","QRMaskPattern","QRUtil","PATTERN_POSITION_TABLE","G15","G18","G15_MASK","getBCHDigit","digit","errorCorrectLength","a","type","qrCode","sameCount","darkCount","abs"],"mappings":"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","file":"static/js/1.37fa5cfc.chunk.js","sourcesContent":["'use strict';\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar React = require('react');\n\nvar PropTypes = require('prop-types'); // qr.js doesn't handle error level of zero (M) so we need to do it right,\n// thus the deep require.\n\n\nvar QRCodeImpl = require('qr.js/lib/QRCode');\n\nvar ErrorCorrectLevel = require('qr.js/lib/ErrorCorrectLevel'); // TODO: pull this off of the QRCode class type so it matches.\n// Convert from UTF-16, forcing the use of byte-mode encoding in our QR Code.\n// This allows us to encode Hanji, Kanji, emoji, etc. Ideally we'd do more\n// detection and not resort to byte-mode if possible, but we're trading off\n// a smaller library for a smaller amount of data we can potentially encode.\n// Based on http://jonisalonen.com/2012/from-utf-16-to-utf-8-in-javascript/\n\n\nfunction convertStr(str) {\n  var out = '';\n\n  for (var i = 0; i < str.length; i++) {\n    var charcode = str.charCodeAt(i);\n\n    if (charcode < 0x0080) {\n      out += String.fromCharCode(charcode);\n    } else if (charcode < 0x0800) {\n      out += String.fromCharCode(0xc0 | charcode >> 6);\n      out += String.fromCharCode(0x80 | charcode & 0x3f);\n    } else if (charcode < 0xd800 || charcode >= 0xe000) {\n      out += String.fromCharCode(0xe0 | charcode >> 12);\n      out += String.fromCharCode(0x80 | charcode >> 6 & 0x3f);\n      out += String.fromCharCode(0x80 | charcode & 0x3f);\n    } else {\n      // This is a surrogate pair, so we'll reconsitute the pieces and work\n      // from that\n      i++;\n      charcode = 0x10000 + ((charcode & 0x3ff) << 10 | str.charCodeAt(i) & 0x3ff);\n      out += String.fromCharCode(0xf0 | charcode >> 18);\n      out += String.fromCharCode(0x80 | charcode >> 12 & 0x3f);\n      out += String.fromCharCode(0x80 | charcode >> 6 & 0x3f);\n      out += String.fromCharCode(0x80 | charcode & 0x3f);\n    }\n  }\n\n  return out;\n}\n\nvar DEFAULT_PROPS = {\n  size: 128,\n  level: 'L',\n  bgColor: '#FFFFFF',\n  fgColor: '#000000',\n  includeMargin: false\n};\nvar PROP_TYPES = process.env.NODE_ENV !== 'production' ? {\n  value: PropTypes.string.isRequired,\n  size: PropTypes.number,\n  level: PropTypes.oneOf(['L', 'M', 'Q', 'H']),\n  bgColor: PropTypes.string,\n  fgColor: PropTypes.string,\n  includeMargin: PropTypes.bool,\n  imageSettings: PropTypes.shape({\n    src: PropTypes.string.isRequired,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    excavate: PropTypes.bool,\n    x: PropTypes.number,\n    y: PropTypes.number\n  })\n} : {};\nvar MARGIN_SIZE = 4; // This is *very* rough estimate of max amount of QRCode allowed to be covered.\n// It is \"wrong\" in a lot of ways (area is a terrible way to estimate, it\n// really should be number of modules covered), but if for some reason we don't\n// get an explicit height or width, I'd rather default to something than throw.\n\nvar DEFAULT_IMG_SCALE = 0.1;\n\nfunction generatePath(modules) {\n  var margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var ops = [];\n  modules.forEach(function (row, y) {\n    var start = null;\n    row.forEach(function (cell, x) {\n      if (!cell && start !== null) {\n        // M0 0h7v1H0z injects the space with the move and drops the comma,\n        // saving a char per operation\n        ops.push(\"M\".concat(start + margin, \" \").concat(y + margin, \"h\").concat(x - start, \"v1H\").concat(start + margin, \"z\"));\n        start = null;\n        return;\n      } // end of row, clean up or skip\n\n\n      if (x === row.length - 1) {\n        if (!cell) {\n          // We would have closed the op above already so this can only mean\n          // 2+ light modules in a row.\n          return;\n        }\n\n        if (start === null) {\n          // Just a single dark module.\n          ops.push(\"M\".concat(x + margin, \",\").concat(y + margin, \" h1v1H\").concat(x + margin, \"z\"));\n        } else {\n          // Otherwise finish the current line.\n          ops.push(\"M\".concat(start + margin, \",\").concat(y + margin, \" h\").concat(x + 1 - start, \"v1H\").concat(start + margin, \"z\"));\n        }\n\n        return;\n      }\n\n      if (cell && start === null) {\n        start = x;\n      }\n    });\n  });\n  return ops.join('');\n} // We could just do this in generatePath, except that we want to support\n// non-Path2D canvas, so we need to keep it an explicit step.\n\n\nfunction excavateModules(modules, excavation) {\n  return modules.slice().map(function (row, y) {\n    if (y < excavation.y || y >= excavation.y + excavation.h) {\n      return row;\n    }\n\n    return row.map(function (cell, x) {\n      if (x < excavation.x || x >= excavation.x + excavation.w) {\n        return cell;\n      }\n\n      return false;\n    });\n  });\n}\n\nfunction getImageSettings(props, cells) {\n  var imageSettings = props.imageSettings,\n      size = props.size,\n      includeMargin = props.includeMargin;\n\n  if (imageSettings == null) {\n    return null;\n  }\n\n  var margin = includeMargin ? MARGIN_SIZE : 0;\n  var numCells = cells.length + margin * 2;\n  var defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);\n  var scale = numCells / size;\n  var w = (imageSettings.width || defaultSize) * scale;\n  var h = (imageSettings.height || defaultSize) * scale;\n  var x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;\n  var y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;\n  var excavation = null;\n\n  if (imageSettings.excavate) {\n    var floorX = Math.floor(x);\n    var floorY = Math.floor(y);\n    var ceilW = Math.ceil(w + x - floorX);\n    var ceilH = Math.ceil(h + y - floorY);\n    excavation = {\n      x: floorX,\n      y: floorY,\n      w: ceilW,\n      h: ceilH\n    };\n  }\n\n  return {\n    x: x,\n    y: y,\n    h: h,\n    w: w,\n    excavation: excavation\n  };\n} // For canvas we're going to switch our drawing mode based on whether or not\n// the environment supports Path2D. We only need the constructor to be\n// supported, but Edge doesn't actually support the path (string) type\n// argument. Luckily it also doesn't support the addPath() method. We can\n// treat that as the same thing.\n\n\nvar SUPPORTS_PATH2D = function () {\n  try {\n    new Path2D().addPath(new Path2D());\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n}();\n\nvar QRCodeCanvas =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(QRCodeCanvas, _React$PureComponent);\n\n  function QRCodeCanvas() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, QRCodeCanvas);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(QRCodeCanvas)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"_canvas\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_image\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      imgLoaded: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleImageLoad\", function () {\n      _this.setState({\n        imgLoaded: true\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(QRCodeCanvas, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.update();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this$props = this.props,\n          value = _this$props.value,\n          size = _this$props.size,\n          level = _this$props.level,\n          bgColor = _this$props.bgColor,\n          fgColor = _this$props.fgColor,\n          includeMargin = _this$props.includeMargin,\n          imageSettings = _this$props.imageSettings; // We'll use type===-1 to force QRCode to automatically pick the best type\n\n      var qrcode = new QRCodeImpl(-1, ErrorCorrectLevel[level]);\n      qrcode.addData(convertStr(value));\n      qrcode.make();\n\n      if (this._canvas != null) {\n        var canvas = this._canvas;\n        var ctx = canvas.getContext('2d');\n\n        if (!ctx) {\n          return;\n        }\n\n        var cells = qrcode.modules;\n\n        if (cells === null) {\n          return;\n        }\n\n        var margin = includeMargin ? MARGIN_SIZE : 0;\n        var numCells = cells.length + margin * 2;\n        var calculatedImageSettings = getImageSettings(this.props, cells);\n\n        if (imageSettings != null && calculatedImageSettings != null) {\n          if (calculatedImageSettings.excavation != null) {\n            cells = excavateModules(cells, calculatedImageSettings.excavation);\n          }\n        } // We're going to scale this so that the number of drawable units\n        // matches the number of cells. This avoids rounding issues, but does\n        // result in some potentially unwanted single pixel issues between\n        // blocks, only in environments that don't support Path2D.\n\n\n        var pixelRatio = window.devicePixelRatio || 1;\n        canvas.height = canvas.width = size * pixelRatio;\n        var scale = size / numCells * pixelRatio;\n        ctx.scale(scale, scale); // Draw solid background, only paint dark modules.\n\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, numCells, numCells);\n        ctx.fillStyle = fgColor;\n\n        if (SUPPORTS_PATH2D) {\n          // $FlowFixMe: Path2D c'tor doesn't support args yet.\n          ctx.fill(new Path2D(generatePath(cells, margin)));\n        } else {\n          cells.forEach(function (row, rdx) {\n            row.forEach(function (cell, cdx) {\n              if (cell) {\n                ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\n              }\n            });\n          });\n        }\n\n        if (this.state.imgLoaded && this._image && calculatedImageSettings != null) {\n          ctx.drawImage(this._image, calculatedImageSettings.x + margin, calculatedImageSettings.y + margin, calculatedImageSettings.w, calculatedImageSettings.h);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          value = _this$props2.value,\n          size = _this$props2.size,\n          level = _this$props2.level,\n          bgColor = _this$props2.bgColor,\n          fgColor = _this$props2.fgColor,\n          style = _this$props2.style,\n          includeMargin = _this$props2.includeMargin,\n          imageSettings = _this$props2.imageSettings,\n          otherProps = _objectWithoutProperties(_this$props2, [\"value\", \"size\", \"level\", \"bgColor\", \"fgColor\", \"style\", \"includeMargin\", \"imageSettings\"]);\n\n      var canvasStyle = _objectSpread({\n        height: size,\n        width: size\n      }, style);\n\n      var img = null;\n      var imgSrc = imageSettings && imageSettings.src;\n\n      if (imageSettings != null && imgSrc != null) {\n        img = React.createElement(\"img\", {\n          src: imgSrc,\n          style: {\n            display: 'none'\n          },\n          onLoad: this.handleImageLoad,\n          ref: function ref(_ref) {\n            return _this2._image = _ref;\n          }\n        });\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(\"canvas\", _extends({\n        style: canvasStyle,\n        height: size,\n        width: size,\n        ref: function ref(_ref2) {\n          return _this2._canvas = _ref2;\n        }\n      }, otherProps)), img);\n    }\n  }]);\n\n  return QRCodeCanvas;\n}(React.PureComponent);\n\n_defineProperty(QRCodeCanvas, \"defaultProps\", DEFAULT_PROPS);\n\nif (process.env.NODE_ENV !== 'production') {\n  QRCodeCanvas.propTypes = PROP_TYPES;\n}\n\nvar QRCodeSVG =\n/*#__PURE__*/\nfunction (_React$PureComponent2) {\n  _inherits(QRCodeSVG, _React$PureComponent2);\n\n  function QRCodeSVG() {\n    _classCallCheck(this, QRCodeSVG);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(QRCodeSVG).apply(this, arguments));\n  }\n\n  _createClass(QRCodeSVG, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          value = _this$props3.value,\n          size = _this$props3.size,\n          level = _this$props3.level,\n          bgColor = _this$props3.bgColor,\n          fgColor = _this$props3.fgColor,\n          includeMargin = _this$props3.includeMargin,\n          imageSettings = _this$props3.imageSettings,\n          otherProps = _objectWithoutProperties(_this$props3, [\"value\", \"size\", \"level\", \"bgColor\", \"fgColor\", \"includeMargin\", \"imageSettings\"]); // We'll use type===-1 to force QRCode to automatically pick the best type\n\n\n      var qrcode = new QRCodeImpl(-1, ErrorCorrectLevel[level]);\n      qrcode.addData(convertStr(value));\n      qrcode.make();\n      var cells = qrcode.modules;\n\n      if (cells === null) {\n        return null;\n      }\n\n      var margin = includeMargin ? MARGIN_SIZE : 0;\n      var numCells = cells.length + margin * 2;\n      var calculatedImageSettings = getImageSettings(this.props, cells);\n      var image = null;\n\n      if (imageSettings != null && calculatedImageSettings != null) {\n        if (calculatedImageSettings.excavation != null) {\n          cells = excavateModules(cells, calculatedImageSettings.excavation);\n        }\n\n        image = React.createElement(\"image\", {\n          xlinkHref: imageSettings.src,\n          height: calculatedImageSettings.h,\n          width: calculatedImageSettings.w,\n          x: calculatedImageSettings.x + margin,\n          y: calculatedImageSettings.y + margin,\n          preserveAspectRatio: \"none\"\n        });\n      } // Drawing strategy: instead of a rect per module, we're going to create a\n      // single path for the dark modules and layer that on top of a light rect,\n      // for a total of 2 DOM nodes. We pay a bit more in string concat but that's\n      // way faster than DOM ops.\n      // For level 1, 441 nodes -> 2\n      // For level 40, 31329 -> 2\n\n\n      var fgPath = generatePath(cells, margin);\n      return React.createElement(\"svg\", _extends({\n        shapeRendering: \"crispEdges\",\n        height: size,\n        width: size,\n        viewBox: \"0 0 \".concat(numCells, \" \").concat(numCells)\n      }, otherProps), React.createElement(\"path\", {\n        fill: bgColor,\n        d: \"M0,0 h\".concat(numCells, \"v\").concat(numCells, \"H0z\")\n      }), React.createElement(\"path\", {\n        fill: fgColor,\n        d: fgPath\n      }), image);\n    }\n  }]);\n\n  return QRCodeSVG;\n}(React.PureComponent);\n\n_defineProperty(QRCodeSVG, \"defaultProps\", DEFAULT_PROPS);\n\nif (process.env.NODE_ENV !== 'production') {\n  QRCodeSVG.propTypes = PROP_TYPES;\n}\n\nvar QRCode = function QRCode(props) {\n  var renderAs = props.renderAs,\n      otherProps = _objectWithoutProperties(props, [\"renderAs\"]);\n\n  var Component = renderAs === 'svg' ? QRCodeSVG : QRCodeCanvas;\n  return React.createElement(Component, otherProps);\n};\n\nQRCode.defaultProps = _objectSpread({\n  renderAs: 'canvas'\n}, DEFAULT_PROPS);\nmodule.exports = QRCode;","module.exports = {\n  MODE_NUMBER: 1 << 0,\n  MODE_ALPHA_NUM: 1 << 1,\n  MODE_8BIT_BYTE: 1 << 2,\n  MODE_KANJI: 1 << 3\n};","module.exports = {\n  L: 1,\n  M: 0,\n  Q: 3,\n  H: 2\n};","var math = require('./math');\n\nfunction QRPolynomial(num, shift) {\n  if (num.length == undefined) {\n    throw new Error(num.length + \"/\" + shift);\n  }\n\n  var offset = 0;\n\n  while (offset < num.length && num[offset] == 0) {\n    offset++;\n  }\n\n  this.num = new Array(num.length - offset + shift);\n\n  for (var i = 0; i < num.length - offset; i++) {\n    this.num[i] = num[i + offset];\n  }\n}\n\nQRPolynomial.prototype = {\n  get: function get(index) {\n    return this.num[index];\n  },\n  getLength: function getLength() {\n    return this.num.length;\n  },\n  multiply: function multiply(e) {\n    var num = new Array(this.getLength() + e.getLength() - 1);\n\n    for (var i = 0; i < this.getLength(); i++) {\n      for (var j = 0; j < e.getLength(); j++) {\n        num[i + j] ^= math.gexp(math.glog(this.get(i)) + math.glog(e.get(j)));\n      }\n    }\n\n    return new QRPolynomial(num, 0);\n  },\n  mod: function mod(e) {\n    if (this.getLength() - e.getLength() < 0) {\n      return this;\n    }\n\n    var ratio = math.glog(this.get(0)) - math.glog(e.get(0));\n    var num = new Array(this.getLength());\n\n    for (var i = 0; i < this.getLength(); i++) {\n      num[i] = this.get(i);\n    }\n\n    for (var i = 0; i < e.getLength(); i++) {\n      num[i] ^= math.gexp(math.glog(e.get(i)) + ratio);\n    } // recursive call\n\n\n    return new QRPolynomial(num, 0).mod(e);\n  }\n};\nmodule.exports = QRPolynomial;","var QRMath = {\n  glog: function glog(n) {\n    if (n < 1) {\n      throw new Error(\"glog(\" + n + \")\");\n    }\n\n    return QRMath.LOG_TABLE[n];\n  },\n  gexp: function gexp(n) {\n    while (n < 0) {\n      n += 255;\n    }\n\n    while (n >= 256) {\n      n -= 255;\n    }\n\n    return QRMath.EXP_TABLE[n];\n  },\n  EXP_TABLE: new Array(256),\n  LOG_TABLE: new Array(256)\n};\n\nfor (var i = 0; i < 8; i++) {\n  QRMath.EXP_TABLE[i] = 1 << i;\n}\n\nfor (var i = 8; i < 256; i++) {\n  QRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4] ^ QRMath.EXP_TABLE[i - 5] ^ QRMath.EXP_TABLE[i - 6] ^ QRMath.EXP_TABLE[i - 8];\n}\n\nfor (var i = 0; i < 255; i++) {\n  QRMath.LOG_TABLE[QRMath.EXP_TABLE[i]] = i;\n}\n\nmodule.exports = QRMath;","var BitByte = require('./8BitByte');\n\nvar RSBlock = require('./RSBlock');\n\nvar BitBuffer = require('./BitBuffer');\n\nvar util = require('./util');\n\nvar Polynomial = require('./Polynomial');\n\nfunction QRCode(typeNumber, errorCorrectLevel) {\n  this.typeNumber = typeNumber;\n  this.errorCorrectLevel = errorCorrectLevel;\n  this.modules = null;\n  this.moduleCount = 0;\n  this.dataCache = null;\n  this.dataList = [];\n} // for client side minification\n\n\nvar proto = QRCode.prototype;\n\nproto.addData = function (data) {\n  var newData = new BitByte(data);\n  this.dataList.push(newData);\n  this.dataCache = null;\n};\n\nproto.isDark = function (row, col) {\n  if (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {\n    throw new Error(row + \",\" + col);\n  }\n\n  return this.modules[row][col];\n};\n\nproto.getModuleCount = function () {\n  return this.moduleCount;\n};\n\nproto.make = function () {\n  // Calculate automatically typeNumber if provided is < 1\n  if (this.typeNumber < 1) {\n    var typeNumber = 1;\n\n    for (typeNumber = 1; typeNumber < 40; typeNumber++) {\n      var rsBlocks = RSBlock.getRSBlocks(typeNumber, this.errorCorrectLevel);\n      var buffer = new BitBuffer();\n      var totalDataCount = 0;\n\n      for (var i = 0; i < rsBlocks.length; i++) {\n        totalDataCount += rsBlocks[i].dataCount;\n      }\n\n      for (var i = 0; i < this.dataList.length; i++) {\n        var data = this.dataList[i];\n        buffer.put(data.mode, 4);\n        buffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber));\n        data.write(buffer);\n      }\n\n      if (buffer.getLengthInBits() <= totalDataCount * 8) break;\n    }\n\n    this.typeNumber = typeNumber;\n  }\n\n  this.makeImpl(false, this.getBestMaskPattern());\n};\n\nproto.makeImpl = function (test, maskPattern) {\n  this.moduleCount = this.typeNumber * 4 + 17;\n  this.modules = new Array(this.moduleCount);\n\n  for (var row = 0; row < this.moduleCount; row++) {\n    this.modules[row] = new Array(this.moduleCount);\n\n    for (var col = 0; col < this.moduleCount; col++) {\n      this.modules[row][col] = null; //(col + row) % 3;\n    }\n  }\n\n  this.setupPositionProbePattern(0, 0);\n  this.setupPositionProbePattern(this.moduleCount - 7, 0);\n  this.setupPositionProbePattern(0, this.moduleCount - 7);\n  this.setupPositionAdjustPattern();\n  this.setupTimingPattern();\n  this.setupTypeInfo(test, maskPattern);\n\n  if (this.typeNumber >= 7) {\n    this.setupTypeNumber(test);\n  }\n\n  if (this.dataCache == null) {\n    this.dataCache = QRCode.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);\n  }\n\n  this.mapData(this.dataCache, maskPattern);\n};\n\nproto.setupPositionProbePattern = function (row, col) {\n  for (var r = -1; r <= 7; r++) {\n    if (row + r <= -1 || this.moduleCount <= row + r) continue;\n\n    for (var c = -1; c <= 7; c++) {\n      if (col + c <= -1 || this.moduleCount <= col + c) continue;\n\n      if (0 <= r && r <= 6 && (c == 0 || c == 6) || 0 <= c && c <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= c && c <= 4) {\n        this.modules[row + r][col + c] = true;\n      } else {\n        this.modules[row + r][col + c] = false;\n      }\n    }\n  }\n};\n\nproto.getBestMaskPattern = function () {\n  var minLostPoint = 0;\n  var pattern = 0;\n\n  for (var i = 0; i < 8; i++) {\n    this.makeImpl(true, i);\n    var lostPoint = util.getLostPoint(this);\n\n    if (i == 0 || minLostPoint > lostPoint) {\n      minLostPoint = lostPoint;\n      pattern = i;\n    }\n  }\n\n  return pattern;\n};\n\nproto.createMovieClip = function (target_mc, instance_name, depth) {\n  var qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);\n  var cs = 1;\n  this.make();\n\n  for (var row = 0; row < this.modules.length; row++) {\n    var y = row * cs;\n\n    for (var col = 0; col < this.modules[row].length; col++) {\n      var x = col * cs;\n      var dark = this.modules[row][col];\n\n      if (dark) {\n        qr_mc.beginFill(0, 100);\n        qr_mc.moveTo(x, y);\n        qr_mc.lineTo(x + cs, y);\n        qr_mc.lineTo(x + cs, y + cs);\n        qr_mc.lineTo(x, y + cs);\n        qr_mc.endFill();\n      }\n    }\n  }\n\n  return qr_mc;\n};\n\nproto.setupTimingPattern = function () {\n  for (var r = 8; r < this.moduleCount - 8; r++) {\n    if (this.modules[r][6] != null) {\n      continue;\n    }\n\n    this.modules[r][6] = r % 2 == 0;\n  }\n\n  for (var c = 8; c < this.moduleCount - 8; c++) {\n    if (this.modules[6][c] != null) {\n      continue;\n    }\n\n    this.modules[6][c] = c % 2 == 0;\n  }\n};\n\nproto.setupPositionAdjustPattern = function () {\n  var pos = util.getPatternPosition(this.typeNumber);\n\n  for (var i = 0; i < pos.length; i++) {\n    for (var j = 0; j < pos.length; j++) {\n      var row = pos[i];\n      var col = pos[j];\n\n      if (this.modules[row][col] != null) {\n        continue;\n      }\n\n      for (var r = -2; r <= 2; r++) {\n        for (var c = -2; c <= 2; c++) {\n          if (r == -2 || r == 2 || c == -2 || c == 2 || r == 0 && c == 0) {\n            this.modules[row + r][col + c] = true;\n          } else {\n            this.modules[row + r][col + c] = false;\n          }\n        }\n      }\n    }\n  }\n};\n\nproto.setupTypeNumber = function (test) {\n  var bits = util.getBCHTypeNumber(this.typeNumber);\n\n  for (var i = 0; i < 18; i++) {\n    var mod = !test && (bits >> i & 1) == 1;\n    this.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;\n  }\n\n  for (var i = 0; i < 18; i++) {\n    var mod = !test && (bits >> i & 1) == 1;\n    this.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n  }\n};\n\nproto.setupTypeInfo = function (test, maskPattern) {\n  var data = this.errorCorrectLevel << 3 | maskPattern;\n  var bits = util.getBCHTypeInfo(data); // vertical\t\t\n\n  for (var i = 0; i < 15; i++) {\n    var mod = !test && (bits >> i & 1) == 1;\n\n    if (i < 6) {\n      this.modules[i][8] = mod;\n    } else if (i < 8) {\n      this.modules[i + 1][8] = mod;\n    } else {\n      this.modules[this.moduleCount - 15 + i][8] = mod;\n    }\n  } // horizontal\n\n\n  for (var i = 0; i < 15; i++) {\n    var mod = !test && (bits >> i & 1) == 1;\n\n    if (i < 8) {\n      this.modules[8][this.moduleCount - i - 1] = mod;\n    } else if (i < 9) {\n      this.modules[8][15 - i - 1 + 1] = mod;\n    } else {\n      this.modules[8][15 - i - 1] = mod;\n    }\n  } // fixed module\n\n\n  this.modules[this.moduleCount - 8][8] = !test;\n};\n\nproto.mapData = function (data, maskPattern) {\n  var inc = -1;\n  var row = this.moduleCount - 1;\n  var bitIndex = 7;\n  var byteIndex = 0;\n\n  for (var col = this.moduleCount - 1; col > 0; col -= 2) {\n    if (col == 6) col--;\n\n    while (true) {\n      for (var c = 0; c < 2; c++) {\n        if (this.modules[row][col - c] == null) {\n          var dark = false;\n\n          if (byteIndex < data.length) {\n            dark = (data[byteIndex] >>> bitIndex & 1) == 1;\n          }\n\n          var mask = util.getMask(maskPattern, row, col - c);\n\n          if (mask) {\n            dark = !dark;\n          }\n\n          this.modules[row][col - c] = dark;\n          bitIndex--;\n\n          if (bitIndex == -1) {\n            byteIndex++;\n            bitIndex = 7;\n          }\n        }\n      }\n\n      row += inc;\n\n      if (row < 0 || this.moduleCount <= row) {\n        row -= inc;\n        inc = -inc;\n        break;\n      }\n    }\n  }\n};\n\nQRCode.PAD0 = 0xEC;\nQRCode.PAD1 = 0x11;\n\nQRCode.createData = function (typeNumber, errorCorrectLevel, dataList) {\n  var rsBlocks = RSBlock.getRSBlocks(typeNumber, errorCorrectLevel);\n  var buffer = new BitBuffer();\n\n  for (var i = 0; i < dataList.length; i++) {\n    var data = dataList[i];\n    buffer.put(data.mode, 4);\n    buffer.put(data.getLength(), util.getLengthInBits(data.mode, typeNumber));\n    data.write(buffer);\n  } // calc num max data.\n\n\n  var totalDataCount = 0;\n\n  for (var i = 0; i < rsBlocks.length; i++) {\n    totalDataCount += rsBlocks[i].dataCount;\n  }\n\n  if (buffer.getLengthInBits() > totalDataCount * 8) {\n    throw new Error(\"code length overflow. (\" + buffer.getLengthInBits() + \">\" + totalDataCount * 8 + \")\");\n  } // end code\n\n\n  if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n    buffer.put(0, 4);\n  } // padding\n\n\n  while (buffer.getLengthInBits() % 8 != 0) {\n    buffer.putBit(false);\n  } // padding\n\n\n  while (true) {\n    if (buffer.getLengthInBits() >= totalDataCount * 8) {\n      break;\n    }\n\n    buffer.put(QRCode.PAD0, 8);\n\n    if (buffer.getLengthInBits() >= totalDataCount * 8) {\n      break;\n    }\n\n    buffer.put(QRCode.PAD1, 8);\n  }\n\n  return QRCode.createBytes(buffer, rsBlocks);\n};\n\nQRCode.createBytes = function (buffer, rsBlocks) {\n  var offset = 0;\n  var maxDcCount = 0;\n  var maxEcCount = 0;\n  var dcdata = new Array(rsBlocks.length);\n  var ecdata = new Array(rsBlocks.length);\n\n  for (var r = 0; r < rsBlocks.length; r++) {\n    var dcCount = rsBlocks[r].dataCount;\n    var ecCount = rsBlocks[r].totalCount - dcCount;\n    maxDcCount = Math.max(maxDcCount, dcCount);\n    maxEcCount = Math.max(maxEcCount, ecCount);\n    dcdata[r] = new Array(dcCount);\n\n    for (var i = 0; i < dcdata[r].length; i++) {\n      dcdata[r][i] = 0xff & buffer.buffer[i + offset];\n    }\n\n    offset += dcCount;\n    var rsPoly = util.getErrorCorrectPolynomial(ecCount);\n    var rawPoly = new Polynomial(dcdata[r], rsPoly.getLength() - 1);\n    var modPoly = rawPoly.mod(rsPoly);\n    ecdata[r] = new Array(rsPoly.getLength() - 1);\n\n    for (var i = 0; i < ecdata[r].length; i++) {\n      var modIndex = i + modPoly.getLength() - ecdata[r].length;\n      ecdata[r][i] = modIndex >= 0 ? modPoly.get(modIndex) : 0;\n    }\n  }\n\n  var totalCodeCount = 0;\n\n  for (var i = 0; i < rsBlocks.length; i++) {\n    totalCodeCount += rsBlocks[i].totalCount;\n  }\n\n  var data = new Array(totalCodeCount);\n  var index = 0;\n\n  for (var i = 0; i < maxDcCount; i++) {\n    for (var r = 0; r < rsBlocks.length; r++) {\n      if (i < dcdata[r].length) {\n        data[index++] = dcdata[r][i];\n      }\n    }\n  }\n\n  for (var i = 0; i < maxEcCount; i++) {\n    for (var r = 0; r < rsBlocks.length; r++) {\n      if (i < ecdata[r].length) {\n        data[index++] = ecdata[r][i];\n      }\n    }\n  }\n\n  return data;\n};\n\nmodule.exports = QRCode;","var mode = require('./mode');\n\nfunction QR8bitByte(data) {\n  this.mode = mode.MODE_8BIT_BYTE;\n  this.data = data;\n}\n\nQR8bitByte.prototype = {\n  getLength: function getLength(buffer) {\n    return this.data.length;\n  },\n  write: function write(buffer) {\n    for (var i = 0; i < this.data.length; i++) {\n      // not JIS ...\n      buffer.put(this.data.charCodeAt(i), 8);\n    }\n  }\n};\nmodule.exports = QR8bitByte;","// ErrorCorrectLevel\nvar ECL = require('./ErrorCorrectLevel');\n\nfunction QRRSBlock(totalCount, dataCount) {\n  this.totalCount = totalCount;\n  this.dataCount = dataCount;\n}\n\nQRRSBlock.RS_BLOCK_TABLE = [// L\n// M\n// Q\n// H\n// 1\n[1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], // 2\n[1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], // 3\n[1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], // 4\t\t\n[1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], // 5\n[1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], // 6\n[2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], // 7\t\t\n[2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], // 8\n[2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], // 9\n[2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], // 10\t\t\n[2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], // 11\n[4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], // 12\n[2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], // 13\n[4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], // 14\n[3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], // 15\n[5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12], // 16\n[5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], // 17\n[1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], // 18\n[5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], // 19\n[3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], // 20\n[3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], // 21\n[4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], // 22\n[2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], // 23\n[4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], // 24\n[6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], // 25\n[8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], // 26\n[10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], // 27\n[8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], // 28\n[3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], // 29\n[7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], // 30\n[5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], // 31\n[13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], // 32\n[17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], // 33\n[17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], // 34\n[13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], // 35\n[12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], // 36\n[6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], // 37\n[17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], // 38\n[4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], // 39\n[20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], // 40\n[19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]];\n\nQRRSBlock.getRSBlocks = function (typeNumber, errorCorrectLevel) {\n  var rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);\n\n  if (rsBlock == undefined) {\n    throw new Error(\"bad rs block @ typeNumber:\" + typeNumber + \"/errorCorrectLevel:\" + errorCorrectLevel);\n  }\n\n  var length = rsBlock.length / 3;\n  var list = new Array();\n\n  for (var i = 0; i < length; i++) {\n    var count = rsBlock[i * 3 + 0];\n    var totalCount = rsBlock[i * 3 + 1];\n    var dataCount = rsBlock[i * 3 + 2];\n\n    for (var j = 0; j < count; j++) {\n      list.push(new QRRSBlock(totalCount, dataCount));\n    }\n  }\n\n  return list;\n};\n\nQRRSBlock.getRsBlockTable = function (typeNumber, errorCorrectLevel) {\n  switch (errorCorrectLevel) {\n    case ECL.L:\n      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\n\n    case ECL.M:\n      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n\n    case ECL.Q:\n      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n\n    case ECL.H:\n      return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n\n    default:\n      return undefined;\n  }\n};\n\nmodule.exports = QRRSBlock;","function QRBitBuffer() {\n  this.buffer = new Array();\n  this.length = 0;\n}\n\nQRBitBuffer.prototype = {\n  get: function get(index) {\n    var bufIndex = Math.floor(index / 8);\n    return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) == 1;\n  },\n  put: function put(num, length) {\n    for (var i = 0; i < length; i++) {\n      this.putBit((num >>> length - i - 1 & 1) == 1);\n    }\n  },\n  getLengthInBits: function getLengthInBits() {\n    return this.length;\n  },\n  putBit: function putBit(bit) {\n    var bufIndex = Math.floor(this.length / 8);\n\n    if (this.buffer.length <= bufIndex) {\n      this.buffer.push(0);\n    }\n\n    if (bit) {\n      this.buffer[bufIndex] |= 0x80 >>> this.length % 8;\n    }\n\n    this.length++;\n  }\n};\nmodule.exports = QRBitBuffer;","var Mode = require('./mode');\n\nvar Polynomial = require('./Polynomial');\n\nvar math = require('./math');\n\nvar QRMaskPattern = {\n  PATTERN000: 0,\n  PATTERN001: 1,\n  PATTERN010: 2,\n  PATTERN011: 3,\n  PATTERN100: 4,\n  PATTERN101: 5,\n  PATTERN110: 6,\n  PATTERN111: 7\n};\nvar QRUtil = {\n  PATTERN_POSITION_TABLE: [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]],\n  G15: 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0,\n  G18: 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0,\n  G15_MASK: 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1,\n  getBCHTypeInfo: function getBCHTypeInfo(data) {\n    var d = data << 10;\n\n    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {\n      d ^= QRUtil.G15 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15);\n    }\n\n    return (data << 10 | d) ^ QRUtil.G15_MASK;\n  },\n  getBCHTypeNumber: function getBCHTypeNumber(data) {\n    var d = data << 12;\n\n    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {\n      d ^= QRUtil.G18 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18);\n    }\n\n    return data << 12 | d;\n  },\n  getBCHDigit: function getBCHDigit(data) {\n    var digit = 0;\n\n    while (data != 0) {\n      digit++;\n      data >>>= 1;\n    }\n\n    return digit;\n  },\n  getPatternPosition: function getPatternPosition(typeNumber) {\n    return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];\n  },\n  getMask: function getMask(maskPattern, i, j) {\n    switch (maskPattern) {\n      case QRMaskPattern.PATTERN000:\n        return (i + j) % 2 == 0;\n\n      case QRMaskPattern.PATTERN001:\n        return i % 2 == 0;\n\n      case QRMaskPattern.PATTERN010:\n        return j % 3 == 0;\n\n      case QRMaskPattern.PATTERN011:\n        return (i + j) % 3 == 0;\n\n      case QRMaskPattern.PATTERN100:\n        return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;\n\n      case QRMaskPattern.PATTERN101:\n        return i * j % 2 + i * j % 3 == 0;\n\n      case QRMaskPattern.PATTERN110:\n        return (i * j % 2 + i * j % 3) % 2 == 0;\n\n      case QRMaskPattern.PATTERN111:\n        return (i * j % 3 + (i + j) % 2) % 2 == 0;\n\n      default:\n        throw new Error(\"bad maskPattern:\" + maskPattern);\n    }\n  },\n  getErrorCorrectPolynomial: function getErrorCorrectPolynomial(errorCorrectLength) {\n    var a = new Polynomial([1], 0);\n\n    for (var i = 0; i < errorCorrectLength; i++) {\n      a = a.multiply(new Polynomial([1, math.gexp(i)], 0));\n    }\n\n    return a;\n  },\n  getLengthInBits: function getLengthInBits(mode, type) {\n    if (1 <= type && type < 10) {\n      // 1 - 9\n      switch (mode) {\n        case Mode.MODE_NUMBER:\n          return 10;\n\n        case Mode.MODE_ALPHA_NUM:\n          return 9;\n\n        case Mode.MODE_8BIT_BYTE:\n          return 8;\n\n        case Mode.MODE_KANJI:\n          return 8;\n\n        default:\n          throw new Error(\"mode:\" + mode);\n      }\n    } else if (type < 27) {\n      // 10 - 26\n      switch (mode) {\n        case Mode.MODE_NUMBER:\n          return 12;\n\n        case Mode.MODE_ALPHA_NUM:\n          return 11;\n\n        case Mode.MODE_8BIT_BYTE:\n          return 16;\n\n        case Mode.MODE_KANJI:\n          return 10;\n\n        default:\n          throw new Error(\"mode:\" + mode);\n      }\n    } else if (type < 41) {\n      // 27 - 40\n      switch (mode) {\n        case Mode.MODE_NUMBER:\n          return 14;\n\n        case Mode.MODE_ALPHA_NUM:\n          return 13;\n\n        case Mode.MODE_8BIT_BYTE:\n          return 16;\n\n        case Mode.MODE_KANJI:\n          return 12;\n\n        default:\n          throw new Error(\"mode:\" + mode);\n      }\n    } else {\n      throw new Error(\"type:\" + type);\n    }\n  },\n  getLostPoint: function getLostPoint(qrCode) {\n    var moduleCount = qrCode.getModuleCount();\n    var lostPoint = 0; // LEVEL1\n\n    for (var row = 0; row < moduleCount; row++) {\n      for (var col = 0; col < moduleCount; col++) {\n        var sameCount = 0;\n        var dark = qrCode.isDark(row, col);\n\n        for (var r = -1; r <= 1; r++) {\n          if (row + r < 0 || moduleCount <= row + r) {\n            continue;\n          }\n\n          for (var c = -1; c <= 1; c++) {\n            if (col + c < 0 || moduleCount <= col + c) {\n              continue;\n            }\n\n            if (r == 0 && c == 0) {\n              continue;\n            }\n\n            if (dark == qrCode.isDark(row + r, col + c)) {\n              sameCount++;\n            }\n          }\n        }\n\n        if (sameCount > 5) {\n          lostPoint += 3 + sameCount - 5;\n        }\n      }\n    } // LEVEL2\n\n\n    for (var row = 0; row < moduleCount - 1; row++) {\n      for (var col = 0; col < moduleCount - 1; col++) {\n        var count = 0;\n        if (qrCode.isDark(row, col)) count++;\n        if (qrCode.isDark(row + 1, col)) count++;\n        if (qrCode.isDark(row, col + 1)) count++;\n        if (qrCode.isDark(row + 1, col + 1)) count++;\n\n        if (count == 0 || count == 4) {\n          lostPoint += 3;\n        }\n      }\n    } // LEVEL3\n\n\n    for (var row = 0; row < moduleCount; row++) {\n      for (var col = 0; col < moduleCount - 6; col++) {\n        if (qrCode.isDark(row, col) && !qrCode.isDark(row, col + 1) && qrCode.isDark(row, col + 2) && qrCode.isDark(row, col + 3) && qrCode.isDark(row, col + 4) && !qrCode.isDark(row, col + 5) && qrCode.isDark(row, col + 6)) {\n          lostPoint += 40;\n        }\n      }\n    }\n\n    for (var col = 0; col < moduleCount; col++) {\n      for (var row = 0; row < moduleCount - 6; row++) {\n        if (qrCode.isDark(row, col) && !qrCode.isDark(row + 1, col) && qrCode.isDark(row + 2, col) && qrCode.isDark(row + 3, col) && qrCode.isDark(row + 4, col) && !qrCode.isDark(row + 5, col) && qrCode.isDark(row + 6, col)) {\n          lostPoint += 40;\n        }\n      }\n    } // LEVEL4\n\n\n    var darkCount = 0;\n\n    for (var col = 0; col < moduleCount; col++) {\n      for (var row = 0; row < moduleCount; row++) {\n        if (qrCode.isDark(row, col)) {\n          darkCount++;\n        }\n      }\n    }\n\n    var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n    lostPoint += ratio * 10;\n    return lostPoint;\n  }\n};\nmodule.exports = QRUtil;"],"sourceRoot":""}